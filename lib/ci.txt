import 'package:daily_task_tracker/ChartScreen.dart';
import 'package:daily_task_tracker/ReminderScreen.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:timezone/data/latest.dart' as tz;
import 'package:timezone/timezone.dart' as tz;
import 'package:awesome_notifications/awesome_notifications.dart';
import 'package:meta/meta.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await AwesomeNotifications().initialize(
    null,
    [
      NotificationChannel(
        channelKey: 'task_channel',
        channelName: 'Task Notifications',
        channelDescription: 'Notifications for scheduled tasks',
        defaultColor: Color(0xFF399EF6),
        ledColor: Colors.white,
        importance: NotificationImportance.High,
        playSound: true,
        enableLights: true,
        enableVibration: true,
      )
    ],
    debug: true,
  );
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final TextEditingController taskController = TextEditingController();
  final TextEditingController searchController = TextEditingController();
  List<Map<String, String>> taskList = [];
  int completedTasks = 0;
  String? errorMessage;
  String _selectedFilter = 'All';

  // Add this new state variable
  final Map<int, bool> _taskNotifications = {};

  @override
  void initState() {
    super.initState();
    tz.initializeTimeZones();
    _loadTasks();
    _initializeTaskNotifications();
    AwesomeNotifications().setListeners(
      onActionReceivedMethod: (ReceivedAction receivedAction) async {
        // Handle notification actions if needed
        if (receivedAction.buttonKeyPressed == 'OPEN_SCREEN') {
          // Navigate to a specific screen based on the notification
          Navigator.of(context).pushNamed('/notification_details',
              arguments: receivedAction.payload);
        }
      },
    );
    _checkPendingNotifications();
  }

  @override
  void dispose() {
    AwesomeNotifications().dispose();
    super.dispose();
  }

  Future<void> _loadTasks() async {
    final prefs = await SharedPreferences.getInstance();
    List<String>? tasks = prefs.getStringList('tasks');
    setState(() {
      taskList = tasks?.map((task) {
            List<String> parts = task.split('|');
            return {
              'task': parts[0],
              'date': parts[1],
              'time': parts[2],
              'category': parts[3],
              'isCompleted': parts[4],
            };
          }).toList() ??
          [];
      completedTasks =
          taskList.where((task) => task['isCompleted'] == 'true').length;
    });
    _initializeTaskNotifications();
  }

  Future<void> _saveTasks() async {
    final prefs = await SharedPreferences.getInstance();
    List<String> tasks = taskList.map((task) {
      return '${task['task']}|${task['date']}|${task['time']}|${task['category']}|${task['isCompleted']}';
    }).toList();
    await prefs.setStringList('tasks', tasks);
  }

  Future<void> _editTask(int index, String newTask, String newDate,
      String newTime, String newCategory) async {
    setState(() {
      taskList[index]['task'] = newTask;
      taskList[index]['date'] = newDate;
      taskList[index]['time'] = newTime;
      taskList[index]['category'] = newCategory;
      _saveTasks();
    });
  }

  void _toggleCompletion(int index, bool? isChecked) {
    setState(() {
      taskList[index]['isCompleted'] = isChecked! ? 'true' : 'false';
      completedTasks =
          taskList.where((task) => task['isCompleted'] == 'true').length;
      _saveTasks();
    });
  }

  void _deleteTask(int index) {
    setState(() {
      taskList.removeAt(index);
      _saveTasks();
    });
  }

  void _showTaskDialog({int? index}) {
    String? selectedCategory = 'Work';
    DateTime? selectedDate;
    TimeOfDay? selectedTime;
    if (index != null) {
      selectedCategory = taskList[index]['category'];
      taskController.text = taskList[index]['task']!;
      selectedDate = DateTime.parse(taskList[index]['date']!);
      selectedTime = TimeOfDay(
        hour: int.parse(taskList[index]['time']!.split(':')[0]),
        minute: int.parse(taskList[index]['time']!.split(':')[1]),
      );
    }
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20.0),
          ),
          backgroundColor: Colors.white,
          title: Text(
            index == null ? "Add Task" : "Edit Task",
            style: GoogleFonts.roboto(
              fontSize: 22,
              fontWeight: FontWeight.bold,
              color: const Color(0xFF399EF6),
            ),
          ),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: taskController,
                  style: const TextStyle(fontSize: 16, color: Colors.black87),
                  decoration: InputDecoration(
                    hintText: 'Enter your task',
                    filled: true,
                    fillColor: const Color(0xFFEFEFEF),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(15),
                      borderSide: BorderSide.none,
                    ),
                    contentPadding: const EdgeInsets.symmetric(
                        vertical: 10, horizontal: 15),
                  ),
                ),
                const SizedBox(height: 10),
                ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF399EF6),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(15),
                    ),
                  ),
                  child: const Text("Pick Date"),
                  onPressed: () {
                    showDatePicker(
                      context: context,
                      initialDate: selectedDate ?? DateTime.now(),
                      firstDate: DateTime.now(),
                      lastDate: DateTime(2030),
                    ).then((pickedDate) {
                      if (pickedDate != null) {
                        setState(() {
                          selectedDate = pickedDate;
                          errorMessage = null;
                        });
                      } else {
                        setState(() {
                          errorMessage = "Please select a date.";
                        });
                      }
                    });
                  },
                ),
                const SizedBox(height: 10),
                ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF399EF6),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(15),
                    ),
                  ),
                  child: const Text("Pick Time"),
                  onPressed: () {
                    showTimePicker(
                      context: context,
                      initialTime: selectedTime ?? TimeOfDay.now(),
                    ).then((pickedTime) {
                      if (pickedTime != null) {
                        setState(() {
                          selectedTime = pickedTime;
                          errorMessage = null;
                        });
                      } else {
                        setState(() {
                          errorMessage = "Please select a time.";
                        });
                      }
                    });
                  },
                ),
                const SizedBox(height: 10),
                DropdownButtonFormField<String>(
                  value: selectedCategory,
                  style: const TextStyle(fontSize: 16, color: Colors.black),
                  decoration: InputDecoration(
                    filled: true,
                    fillColor: const Color(0xFFEFEFEF),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(15),
                      borderSide: BorderSide.none,
                    ),
                    contentPadding: const EdgeInsets.symmetric(
                        vertical: 10, horizontal: 15),
                  ),
                  items: ['Work', 'Personal', 'Study'].map((String category) {
                    return DropdownMenuItem<String>(
                      value: category,
                      child: Text(category),
                    );
                  }).toList(),
                  onChanged: (String? newCategory) {
                    setState(() {
                      selectedCategory = newCategory;
                    });
                  },
                ),
                if (errorMessage != null)
                  Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: Text(
                      errorMessage!,
                      style: const TextStyle(color: Colors.red),
                    ),
                  ),
              ],
            ),
          ),
          actions: [
            TextButton(
              style: TextButton.styleFrom(
                foregroundColor: Colors.red,
                textStyle: const TextStyle(fontWeight: FontWeight.bold),
              ),
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text("Cancel"),
            ),
            ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color(0xFF399EF6),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(15),
                ),
              ),
              onPressed: () {
                if (taskController.text.isEmpty ||
                    selectedDate == null ||
                    selectedTime == null ||
                    selectedCategory == null) {
                  setState(() {
                    errorMessage = "Please fill all fields.";
                  });
                } else {
                  DateTime scheduledTime = DateTime(
                    selectedDate!.year,
                    selectedDate!.month,
                    selectedDate!.day,
                    selectedTime!.hour,
                    selectedTime!.minute,
                  );
                  if (index == null) {
                    setState(() {
                      taskList.add({
                        'task': taskController.text,
                        'date':
                            selectedDate!.toLocal().toString().split(' ')[0],
                        'time': selectedTime!.format(context),
                        'category': selectedCategory!,
                        'isCompleted': 'false',
                      });
                      _scheduleNotification(taskList.length - 1, scheduledTime);
                      taskController.clear();
                      errorMessage = null;
                    });
                  } else {
                    _editTask(
                      index,
                      taskController.text,
                      selectedDate!.toLocal().toString().split(' ')[0],
                      selectedTime!.format(context),
                      selectedCategory!,
                    );
                    _scheduleNotification(index, scheduledTime);
                  }
                  _saveTasks();
                  Navigator.of(context).pop();
                }
              },
              child: Text(index == null ? "Add" : "Save"),
            ),
          ],
        );
      },
    );
  }

  void _scheduleNotification(int index, DateTime scheduledTime) async {
    try {
      bool success = await AwesomeNotifications().createNotification(
        content: NotificationContent(
          id: index,
          channelKey: 'task_channel',
          title: "It's time: ${taskList[index]['task']}",
          body: "Scheduled for ${taskList[index]['time']}",
          notificationLayout: NotificationLayout.Default,
        ),
        schedule: NotificationCalendar.fromDate(date: scheduledTime),
      );
      print(
          "Notification scheduled: $success for task ${taskList[index]['task']} at $scheduledTime");
    } catch (e) {
      print("Error scheduling notification: $e");
    }
    _checkPendingNotifications();
  }

  void _cancelNotification(int index) async {
    await AwesomeNotifications().cancel(index);
  }

  void _showToastNotification(int index) {
    AwesomeNotifications().createNotification(
      content: NotificationContent(
        id: 1000 + index,
        channelKey: 'task_channel',
        title: "It's time: ${taskList[index]['task']}",
        body:
            "Time: ${taskList[index]['time']}\nCategory: ${taskList[index]['category']}",
        notificationLayout: NotificationLayout.BigText,
        displayOnForeground: true,
        displayOnBackground: true,
        autoDismissible: true,
      ),
    );
  }

  // Add this new method
  void _initializeTaskNotifications() {
    for (int i = 0; i < taskList.length; i++) {
      _taskNotifications[i] = true;
    }
  }

  void _checkPendingNotifications() async {
    List<NotificationModel> pendingNotifications =
        await AwesomeNotifications().listScheduledNotifications();
    print("Pending notifications: ${pendingNotifications.length}");
    for (var notification in pendingNotifications) {
      print(
          "ID: ${notification.content!.id}, Title: ${notification.content!.title}, Schedule: ${notification.schedule!.toMap()}");
    }
  }

  @override
  Widget build(BuildContext context) {
    List<Map<String, String>> filteredTasks = taskList
        .where((task) {
          final searchQuery = searchController.text.toLowerCase();
          return (task['task']!.toLowerCase().contains(searchQuery) ||
              task['date']!.contains(searchQuery));
        })
        .where((task) =>
            _selectedFilter == 'All' || task['category'] == _selectedFilter)
        .toList();

    return Scaffold(
      appBar: AppBar(
        title: Text("Task Tracker", style: GoogleFonts.roboto()),
        backgroundColor: const Color(0xFF399EF6),
        actions: [
          IconButton(
            icon: const Icon(Icons.notifications),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => ReminderScreen()),
              );
            },
          ),
          IconButton(
            icon: const Icon(Icons.pie_chart),
            onPressed: () {
              int workTasks =
                  taskList.where((task) => task['category'] == 'Work').length;
              int personalTasks = taskList
                  .where((task) => task['category'] == 'Personal')
                  .length;
              int studyTasks =
                  taskList.where((task) => task['category'] == 'Study').length;

              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => ChartScreen(
                    completedTasks: completedTasks,
                    totalTasks: taskList.length,
                    workTasks: workTasks,
                    personalTasks: personalTasks,
                    studyTasks: studyTasks,
                  ),
                ),
              );
            },
          )
        ],
      ),
      body: Column(
        children: [
          // Search Bar
          TextField(
            controller: searchController,
            decoration: const InputDecoration(
              hintText: 'Search by task or date',
              border: OutlineInputBorder(),
              fillColor: Color(0xFF399EF6),
              filled: true,
            ),
            onChanged: (value) {
              setState(() {});
            },
          ),
          // Segmented Control for filtering tasks
          Container(
            width: double.infinity,
            color: const Color(0xFF399EF6),
            padding: const EdgeInsets.all(10.0),
            child: SegmentedButton<String>(
              segments: const <ButtonSegment<String>>[
                ButtonSegment<String>(value: 'All', label: Text('All')),
                ButtonSegment<String>(value: 'Work', label: Text('Work')),
                ButtonSegment<String>(
                    value: 'Personal', label: Text('Personal')),
                ButtonSegment<String>(value: 'Study', label: Text('Study')),
              ],
              selected: {_selectedFilter},
              onSelectionChanged: (Set<String> newSelection) {
                setState(() {
                  _selectedFilter = newSelection.first;
                });
              },
            ),
          ),

          // Progress Bar
          Container(
            height: 60,
            width: double.infinity,
            padding: const EdgeInsets.all(10.0),
            decoration: const BoxDecoration(
              color: Color(0xFF399EF6),
              borderRadius: BorderRadius.only(
                bottomLeft: Radius.circular(20),
                bottomRight: Radius.circular(20),
              ),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  "You finished ${taskList.isEmpty ? 0 : (completedTasks / taskList.length * 100).toStringAsFixed(0)}%",
                  style: const TextStyle(color: Colors.white),
                ),
                const SizedBox(width: 10),
                Expanded(
                  child: LinearProgressIndicator(
                    value:
                        taskList.isEmpty ? 0 : completedTasks / taskList.length,
                    backgroundColor: Colors.white,
                    color: Colors.green,
                    minHeight: 10,
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(height: 10),
          filteredTasks.isEmpty
              ? Padding(
                  padding: const EdgeInsets.all(20.0),
                  child:
                      Text("No tasks added yet!", style: GoogleFonts.roboto()),
                )
              : Expanded(
                  child: ListView.builder(
                    itemCount: filteredTasks.length,
                    itemBuilder: (context, index) {
                      return Card(
                        elevation: 2,
                        margin: const EdgeInsets.symmetric(
                            vertical: 5, horizontal: 10),
                        child: ListTile(
                          title: Text(filteredTasks[index]['task'] ?? '',
                              style: GoogleFonts.roboto()),
                          subtitle: Text(
                              "${filteredTasks[index]['date']} ${filteredTasks[index]['time']} - ${filteredTasks[index]['category']}",
                              style: TextStyle(color: Colors.grey[600])),
                          trailing: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Checkbox(
                                value: filteredTasks[index]['isCompleted'] ==
                                    'true',
                                onChanged: (bool? checked) {
                                  _toggleCompletion(
                                      taskList.indexOf(filteredTasks[index]),
                                      checked);
                                },
                              ),
                              IconButton(
                                icon: const Icon(Icons.edit),
                                onPressed: () => _showTaskDialog(
                                    index:
                                        taskList.indexOf(filteredTasks[index])),
                              ),
                              IconButton(
                                icon: const Icon(Icons.delete),
                                onPressed: () {
                                  showDialog(
                                    context: context,
                                    builder: (BuildContext context) {
                                      return AlertDialog(
                                        title: Text("Delete Task",
                                            style: GoogleFonts.roboto()),
                                        content: const Text(
                                            "Are you sure you want to delete this task?"),
                                        actions: [
                                          TextButton(
                                            child: const Text("Cancel"),
                                            onPressed: () {
                                              Navigator.of(context).pop();
                                            },
                                          ),
                                          TextButton(
                                            child: const Text("Delete"),
                                            onPressed: () {
                                              _deleteTask(taskList.indexOf(
                                                  filteredTasks[index]));
                                              Navigator.of(context).pop();
                                            },
                                          ),
                                        ],
                                      );
                                    },
                                  );
                                },
                              ),
                              IconButton(
                                icon: Icon(_taskNotifications[taskList
                                            .indexOf(filteredTasks[index])] ??
                                        true
                                    ? Icons.notifications
                                    : Icons.notifications_off),
                                onPressed: () {
                                  int taskIndex =
                                      taskList.indexOf(filteredTasks[index]);
                                  setState(() {
                                    _taskNotifications[taskIndex] =
                                        !(_taskNotifications[taskIndex] ??
                                            true);
                                  });
                                  if (_taskNotifications[taskIndex] ?? false) {
                                    DateTime taskDate = DateTime.parse(
                                        taskList[taskIndex]['date']!);
                                    TimeOfDay taskTime = TimeOfDay(
                                      hour: int.parse(taskList[taskIndex]
                                              ['time']!
                                          .split(':')[0]),
                                      minute: int.parse(taskList[taskIndex]
                                              ['time']!
                                          .split(':')[1]),
                                    );
                                    DateTime scheduledTime = DateTime(
                                      taskDate.year,
                                      taskDate.month,
                                      taskDate.day,
                                      taskTime.hour,
                                      taskTime.minute,
                                    );
                                    _scheduleNotification(
                                        taskIndex, scheduledTime);
                                    _showToastNotification(taskIndex);
                                  } else {
                                    _cancelNotification(taskIndex);
                                    AwesomeNotifications().createNotification(
                                      content: NotificationContent(
                                        id: 2000 + taskIndex,
                                        channelKey: 'task_channel',
                                        title: 'Notification Disabled',
                                        body:
                                            'Notification disabled for task: ${taskList[taskIndex]['task']}',
                                        notificationLayout:
                                            NotificationLayout.Default,
                                      ),
                                    );
                                  }
                                },
                              ),
                            ],
                          ),
                        ),
                      );
                    },
                  ),
                ),
          const SizedBox(height: 10),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        backgroundColor: const Color(0xFF399EF6),
        onPressed: () => _showTaskDialog(),
        child: const Icon(Icons.add),
      ),
    );
  }
}
